using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using HtmlAgilityPack;

namespace DataRepair
{
    public partial class Form1 : Form
    {
        private static System.Timers.Timer timer = null;
        private static string con = "";
        public Form1()
        {
            InitializeComponent();
            con = ConfigurationManager.ConnectionStrings["DB"].ToString();
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            DateTime StartTime = timeStart.Value;
            DateTime EndTime = timeEnd.Value;
            listBox1.Items.Add("..........");
            //空气质量监测数据 
            if (rbAirMon.Checked)
            {
                AirMonitor am = new AirMonitor();
                am.con = con;
                //am.getAirHourData();
                //am.getAirDayData();
                am.getCountyAirData();
                //TimeSpan ts = timeEnd.Value - timeStart.Value;
                //int days = int.Parse(ts.TotalDays.ToString().Split('.')[0]);
                //for (int i = 0; i < days; i++)
                //{
                //    am.getCountyAirData(0 - i);
                //}
                listBox1.Items.Add("空气质量检测数据更新成功！");
            }
            //空气质量预报数据
            if (rbAirForCast.Checked)
            {
                AirForCast afc = new AirForCast();
                afc.con = con;
                if (rbNew.Checked)
                {
                    //afc.InsertAirForeCastWRFDataNew();
                    afc.InsertAirForeCastSSCIData();
                }
                if (rbOld.Checked)
                {
                    DateTime start = timeStart.Value.AddDays(-1);
                    DateTime end = timeEnd.Value;
                    afc.startTime = start;
                    afc.endTime = end;
                    //afc.InsertAirForeCastWRFDataNew();
                    afc.InsertAirForeCastSSCIData();
                }
                //afc.InsertAirForeCastSSCIData();
                //afc.InsertAirForeCastCMAQData();
                //afc.InsertAirForeCastWRFData();
                listBox1.Items.Add("空气质量预报数据更新成功！");
            }
            //气象监测数据  
            if (rbQxMon.Checked)
            {
                string scon = ConfigurationManager.ConnectionStrings["sourceDB"].ToString();
                string tcon = ConfigurationManager.ConnectionStrings["targetDB"].ToString();
                QxMonitor qm = new QxMonitor();
                qm.scon = scon;
                qm.tcon = tcon;
                qm.getQxMonitorData();
                listBox1.Items.Add("气象监测数据更新成功！");
            }
            //气象预报报文 
            if (rbQxForCast.Checked)
            {
                string scon = ConfigurationManager.ConnectionStrings["sourceDB"].ToString();
                string tcon = ConfigurationManager.ConnectionStrings["targetDB"].ToString();
                QxForeCast qf = new QxForeCast();
                qf.scon = scon;
                qf.tcon = tcon;
                qf.getQxPacket();
                listBox1.Items.Add("气象预报报文更新成功！");
            }

            //气象监测资料 
            if (rbQxFile.Checked)
            {
                QxFiles qf = new QxFiles();
                //qf.getShareFile();
                qf.ClearFile();
                listBox1.Items.Add("气象监测资料更新成功！");
            }

            //气象监测图片
            if (rbQxImg.Checked)
            {
                
            }
            if (rbCityAir.Checked)
            {
                getCityAirHtml("2015-9-13");
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            
        }

        public static bool IsUrlExist(string Url)
        {
            bool IsExist = false;

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(new Uri(Url));
            ServicePointManager.Expect100Continue = false;
            try
            {
                ((HttpWebResponse)request.GetResponse()).Close();
                IsExist = true;
            }
            catch (WebException exception)
            {
                //if (exception.Status != WebExceptionStatus.ProtocolError)
                //{
                //    return num;
                //}
                //if (exception.Message.IndexOf("500 ") > 0)
                //{
                //    return 500;
                //}
                //if (exception.Message.IndexOf("401 ") > 0)
                //{
                //    return 401;
                //}
                //if (exception.Message.IndexOf("404") > 0)
                //{
                //    num = 404;
                //}
                IsExist = false;
            }
            return IsExist;
        }

        private static bool UrlIsExist(String url)
        {
            System.Uri u = null;
            try
            {
                u = new Uri(url);
            }
            catch { return false; }
            bool isExist = false;
            System.Net.HttpWebRequest r = System.Net.HttpWebRequest.Create(u) as System.Net.HttpWebRequest;
            r.Method = "HEAD";
            try
            {
                System.Net.HttpWebResponse s = r.GetResponse() as System.Net.HttpWebResponse;
                if (s.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    isExist = true;
                }
            }
            catch (System.Net.WebException x)
            {
                try
                {
                    isExist = ((x.Response as System.Net.HttpWebResponse).StatusCode != System.Net.HttpStatusCode.NotFound);
                }
                catch { isExist = (x.Status == System.Net.WebExceptionStatus.Success); }
            }
            return isExist;
        }

        private string getCityAirHtml(string date)
        {
            string strSql = "select * from [dbo].[T_Mid_CityDayData] where MonitorTime = '" + date + "'";
            DataSet ds = SqlHelper.ExecuteDataset(con, CommandType.Text, strSql);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

            }
            else
            {
                
                int page = 13;
                for (int i = 0; i < page; i++)
                {
                    string targetUrl = "http://datacenter.mep.gov.cn/report/air_daily/air_dairy.jsp?city=&";
                    targetUrl += "startdate=" + date + "&enddate=" + date + "&page=" + (i + 1);
                    string html = GetPage(targetUrl);
                    ReadHtml(html);
                }
            }
            
            return "";
        }

        public string GetPage(string url)
        {
            HttpWebRequest request = null;
            HttpWebResponse response = null;
            StreamReader reader = null;
            Encoding encoding = Encoding.UTF8;
            try
            {
                request = (HttpWebRequest)WebRequest.Create(url);
                request.UserAgent = "www.csddt.com";
                request.Timeout = 20000;
                request.AllowAutoRedirect = false;
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK && response.ContentLength < 1024 * 1024)
                {
                    reader = new StreamReader(response.GetResponseStream(), encoding);
                    string html = reader.ReadToEnd();
                    return html;
                }
            }
            catch { }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    response = null;
                }
                if (reader != null)
                    reader.Close();
                if (request != null)
                    request = null;
            }
            return string.Empty;
        }

        public string ReadHtml(string strHtml)
        {
            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
            doc.LoadHtml(strHtml);
            
            foreach (HtmlNode table in doc.DocumentNode.SelectNodes("//table"))
            {
                if (table.Id == "report1")
                {
                    foreach (HtmlNode row in table.SelectNodes("tr"))
                    {
                        if (row.Attributes[0].Value == "30")
                        {
                            string strInsert = "insert into [dbo].[T_Mid_CityDayData](CityName,MonitorTime,AQI,FirstP,AirLevel) values(";
                            string strValue="";
                            foreach (HtmlNode cell in row.SelectNodes("th|td"))
                            {
                                if (cell.Attributes[0].Value == "report1_2")
                                    strValue += "'" + cell.InnerText + "',";
                                else if (cell.Attributes[0].Name == "onmouseover")
                                {
                                    if (cell.Attributes[1].Value == "report1_2")
                                        strValue += "'" + cell.InnerText + "',";
                                    else if (cell.Attributes[1].Value == "report1_3")
                                        strValue += "'" + cell.InnerText + "',";
                                }
                                else  if (cell.Attributes[0].Value == "report1_3")
                                    strValue += "'" + cell.InnerText + "',";
                            }
                            if (strValue.Length > 0 && strValue.IndexOf("序号") == -1)
                            {
                                strInsert += strValue.Substring(0, strValue.Length - 1) + ")";
                                try
                                {
                                    SqlHelper.ExecuteNonQuery(con, CommandType.Text, strInsert);
                                }
                                catch (Exception)
                                {
                                }

                            }
                        }
                    }
                }
            }
            return "";
        }
    }

        
}
